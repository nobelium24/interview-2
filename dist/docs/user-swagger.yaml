openapi: 3.0.0
info:
  title: User API
  version: 1.0.0
paths:
  /user:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                country:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '409':
          description: User already exists

  /user/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User logged in successfully
        '404':
          description: User not found
        '400':
          description: Invalid password

  /user/verify:
    post:
      summary: Verify a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                verificationCode:
                  type: string
      responses:
        '200':
          description: User verified successfully
        '404':
          description: User not found
        '400':
          description: User already verified
        '401':
          description: Invalid verification code

  /user/post:
    post:
      summary: Create a new post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
      responses:
        '201':
          description: Post created successfully

  /user/post/{postId}:
    put:
      summary: Edit a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
      responses:
        '200':
          description: Post updated successfully
        '404':
          description: Post not found or unauthorized

    delete:
      summary: Delete a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Post deleted successfully
        '404':
          description: Post not found or unauthorized

    get:
      summary: Get a single post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: A single post with comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  post:
                    type: object
                    properties:
                      id:
                        type: string
                      title:
                        type: string
                      content:
                        type: string
                      comments:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            content:
                              type: string
        '404':
          description: Post not found

  /user/post/comment/{postId}:
    post:
      summary: Comment on a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '201':
          description: Comment added successfully

  /user/posts:
    get:
      summary: Get all posts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of posts with comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        title:
                          type: string
                        content:
                          type: string
                        comments:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              content:
                                type: string
    
  /user/post/single-user:
    get:
      summary: Get posts by the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of posts by the authenticated user with comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        title:
                          type: string
                        content:
                          type: string
                        comments:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              content:
                                type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT